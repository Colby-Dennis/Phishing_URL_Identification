install.packages('tidyverse')
install.packages(c("dplyr","ggplot2"))
df <- c(1,2,3,4,5)
a <- df*2
help(ggplot)
??ggplot2
clear()
??ggplot
# Required Packages
# install.packages("ggplot2")
# install.packages("gridExtra")
# install.packages("neuralnet")
# install.packages("caret")
library(ggplot2)
library(gridExtra)
library(neuralnet)
library(caret)
library(rpart); library(rpart.plot)
library(DMwR)
setwd('/home/colby/Documents/GitHub/Phishing_URL_Identification/')
#Loading in the data
mysmalldata <- read.csv("rawDataSetSmall.csv")
myrawdata <- read.csv("rawDataSet.csv", stringsAsFactors = F)
# Renaming data according to provided paper.
data_names <- c("id","having_IP_address","URL_Length","Shortining_Service","having_At_Symbol",
"double_slash_redirecting","Prefix_Suffix","having_Sub_Domain","SSLfinal_State",
"Domain_registration_length","Favicon","Port","HTTPS_token","Request_URL",
"URL_of_Anchor","Links_in_tags","SFH","Submitting_to_email","Abnormal_URL",
"Redirect","on_mouseover","RightClick","popUpWindow","Iframe","age_of_domain",
"DNSRecord","web_traffic","Page_Rank","Google_Index","Links_pointing_to_page",
"Statistical_report","Result")
names(mysmalldata) <- data_names
names(myrawdata) <- data_names
# Function that removes all non-existance result rows
clean_results <- function(df) {
does_exist <- c() # Initialize with information
i <- 1
while (i <= (nrow(df))) {
if (is.na(df[i,ncol(df)])) {
does_exist[i] <- F
} else {
does_exist[i] <- T
}
i <- i + 1
}
return(df[does_exist,])
}
# Function that replaces all NA's with zeros
replace_zero <- function(df) {
i <- 2
while (i <= (ncol(df)-1)) {
j <- 1
while (j<= nrow(df[i])) {
if (is.na(df[[i]][j])) {
df[[i]][j] <- 0
}
j <- j + 1
}
i <- i + 1
}
return(df)
}
# Function that replaces the unknown with an average.
replace_average <- function(df) {
i <- 2
while (i <= (ncol(df)-1)) {
j <- 1
average = mean(df[,i], na.rm=T)
while (j<= nrow(df[i])) {
if (is.na(df[[i]][j])) {
df[[i]][j] <- average
}
j <- j + 1
}
i <- i + 1
}
return(df)
}
replace_distribution <- function(df) {
for (i in 2:(ncol(df)-1)) {
uniq1 <- c(0,-1, 1)
cnt <- tabulate(match(df[,i], uniq1))
prop <- cnt[2] / cnt[3]
for (j in 1:nrow(df)){
if(is.na(df[j,i])){
df[j,i] <-ifelse(runif(1)<=prop,-1,1)
}
}
}
return(df)
}
# Function that replaces the unknown with the most often
replace_mode <- function(df) {
i <- 2
while (i <= (ncol(df)-1)) {
j <- 1
value_matrix <- matrix(table(df[,i]))
value <- -1
if (nrow(value_matrix) == 3) {
if (value_matrix[1] > value_matrix[2] && value_matrix[1] > value_matrix[3]) {
value <- -1
} else if (value_matrix[2] > value_matrix[3]) {
value <- 0
} else {
value <- 1
}
} else {
if (value_matrix[1] > value_matrix[2]) {
value <- -1
} else {
value <- 1
}
}
while (j<= nrow(df[i])) {
if (is.na(df[[i]][j])) {
df[[i]][j] <- value
}
j <- j + 1
}
i <- i + 1
}
return(df)
}
#Randomly generates either a -1,0,1
set0<-c(-1,0,1)
replace_random_withzero <- function(df) {
i <- 2
while (i <= (ncol(df)-1)) {
j <- 1
while (j<= nrow(df[i])) {
if (is.na(df[[i]][j])) {
value<-sample(set0,1)
df[[i]][j] <- value
}
j <- j + 1
}
i <- i + 1
}
return(df)
}
# A function to covert predictions to binary result
get_prediction <- function(mod) {
result_vec <- integer(nrow(mod))
i <- 1
while (i <= nrow(mod)) {
if (mod[i] >= 0) {
result_vec[i] <- 1
} else {
result_vec[i] <- -1
}
i <- i + 1
}
return(result_vec)
}
set.seed(700)
# Getting datasets
small_cleaned_results <- clean_results(mysmalldata)
raw_cleaned_results <- clean_results(myrawdata)
# Partition Data
partitioned_small <- createDataPartition(y = small_cleaned_results$Result, p= 0.7, list = FALSE)
mysmalldata_train_b <- small_cleaned_results[partitioned_small,]
mysmalldata_test_b <- small_cleaned_results[-partitioned_small,]
partitioned_raw <- createDataPartition(y = raw_cleaned_results$Result, p= 0.7, list = FALSE)
myrawdata_train_b <- raw_cleaned_results[partitioned_raw,]
myrawdata_test_b <- raw_cleaned_results[-partitioned_raw,]
# Check Partition
#two-sample z-test on small data (mysmalldata_test , mysmalldata_train)
p1 <- sum(mysmalldata_train_b$Result=="-1")/nrow(mysmalldata_train_b)
p2 <- sum(mysmalldata_test_b$Result=="-1")/nrow(mysmalldata_test_b)
p_pooled <- (sum(mysmalldata_train_b$Result=="-1") +
sum(mysmalldata_test_b$Result=="-1"))/
(nrow(mysmalldata_train_b) + nrow(mysmalldata_test_b))
z <- (p1 - p2)/sqrt(p_pooled*(1-p_pooled) *
(1/nrow(mysmalldata_train_b) + 1/nrow(mysmalldata_test_b)))
z.p <- 2*pnorm(-abs(z))
#two-sample z-test on raw data (myrawdata_test, myrawdata_train)
p1 <- sum(myrawdata_train_b$Result=="-1")/nrow(myrawdata_train_b)
p2 <- sum(myrawdata_test_b$Result=="-1")/nrow(myrawdata_test_b)
p_pooled <- (sum(myrawdata_train_b$Result=="-1") +
sum(myrawdata_test_b$Result=="-1"))/
(nrow(myrawdata_train_b) + nrow(myrawdata_test_b))
z <- (p1 - p2)/sqrt(p_pooled*(1-p_pooled) *
(1/nrow(myrawdata_train_b) + 1/nrow(myrawdata_test_b)))
z.p <- 2*pnorm(-abs(z))
#replace with Zeros
# mysmalldata_train <- replace_zero(mysmalldata_train_b)
# mysmalldata_test <- replace_zero(mysmalldata_test_b)
# myrawdata_train <- replace_zero(myrawdata_train_b)
# myrawdata_test <- replace_zero(myrawdata_test_b)
# #replace with random -1 or 1
mysmalldata_train <- replace_random_withzero(mysmalldata_train_b)
mysmalldata_test <- replace_random_withzero(mysmalldata_test_b)
myrawdata_train <- replace_random_withzero(myrawdata_train_b)
myrawdata_test <- replace_random_withzero(myrawdata_test_b)
mysmalldata_train <- replace_mode(mysmalldata_train_b)
mysmalldata_test <- replace_mode(mysmalldata_test_b)
myrawdata_train <- replace_mode(myrawdata_train_b)
myrawdata_test <- replace_mode(myrawdata_test_b)
# Decision Tree for small data
tree.model <- rpart(Result~., data=mysmalldata_train, method="class")
print(tree.model) #shows the data partition percentages and the split attributes
#run the model on the data, print a confusion matrix, and show the accuracy
tree.prediction <- predict(tree.model, newdata=mysmalldata_test, type="class")
confusion.matrix <- table(mysmalldata_test$Result, tree.prediction)
print(confusion.matrix)
#generate the tree accuracy from the confusion matrix
accuracy.percent <- 100*sum(diag(confusion.matrix))/sum(confusion.matrix)
print(paste("accuracy:",accuracy.percent,"%"))
print(paste("error rate:",100-accuracy.percent,"%"))
#plot the tree
plot(tree.model)
text(tree.model, pretty=1)
prettyTree(tree.model)
rpart.plot(tree.model,box.palette="RdBu", shadow.col="gray", nn=TRUE)
mysmalldata_train <- replace_distribution(mysmalldata_train_b)
mysmalldata_test <- replace_distribution(mysmalldata_test_b)
myrawdata_train <- replace_distribution(myrawdata_train_b)
myrawdata_test <- replace_distribution(myrawdata_test_b)
# Decision Tree for small data
tree.model <- rpart(Result~., data=mysmalldata_train, method="class")
print(tree.model) #shows the data partition percentages and the split attributes
#run the model on the data, print a confusion matrix, and show the accuracy
tree.prediction <- predict(tree.model, newdata=mysmalldata_test, type="class")
confusion.matrix <- table(mysmalldata_test$Result, tree.prediction)
print(confusion.matrix)
#generate the tree accuracy from the confusion matrix
accuracy.percent <- 100*sum(diag(confusion.matrix))/sum(confusion.matrix)
print(paste("accuracy:",accuracy.percent,"%"))
print(paste("error rate:",100-accuracy.percent,"%"))
#plot the tree
plot(tree.model)
text(tree.model, pretty=1)
prettyTree(tree.model)
rpart.plot(tree.model,box.palette="RdBu", shadow.col="gray", nn=TRUE)
mysmalldata_train <- replace_mode(mysmalldata_train_b)
mysmalldata_test <- replace_mode(mysmalldata_test_b)
myrawdata_train <- replace_mode(myrawdata_train_b)
myrawdata_test <- replace_mode(myrawdata_test_b)
nn_1_3_small<-neuralnet(Result~having_IP_address+URL_Length+Shortining_Service+having_At_Symbol+
double_slash_redirecting+Prefix_Suffix+having_Sub_Domain+SSLfinal_State+
Domain_registration_length+Favicon+Port+HTTPS_token+Request_URL+
URL_of_Anchor+Links_in_tags+SFH+Submitting_to_email+Abnormal_URL+
Redirect+on_mouseover+RightClick+popUpWindow+Iframe+age_of_domain+
DNSRecord+web_traffic+Page_Rank+Google_Index+Links_pointing_to_page+
Statistical_report, mysmalldata_train,hidden=c(3))
plot(nn_1_3_small)
nn_1_3_small_model<-predict(nn_1_3_small,newdata = mysmalldata_test)
nn_1_3_small_result <- get_prediction(nn_1_3_small_model)
nn_1_3_small_conf <- confusionMatrix(factor(nn_1_3_small_result), factor(mysmalldata_test$Result), mode="everything")
print(nn_1_3_small_conf)
nn_1_4_small<-neuralnet(Result~having_IP_address+URL_Length+Shortining_Service+having_At_Symbol+
double_slash_redirecting+Prefix_Suffix+having_Sub_Domain+SSLfinal_State+
Domain_registration_length+Favicon+Port+HTTPS_token+Request_URL+
URL_of_Anchor+Links_in_tags+SFH+Submitting_to_email+Abnormal_URL+
Redirect+on_mouseover+RightClick+popUpWindow+Iframe+age_of_domain+
DNSRecord+web_traffic+Page_Rank+Google_Index+Links_pointing_to_page+
Statistical_report, mysmalldata_train,hidden=c(4))
plot(nn_1_4_small)
nn_1_4_small_model<-predict(nn_1_4_small,newdata = mysmalldata_test)
nn_1_4_small_result <- get_prediction(nn_1_4_small_model)
nn_1_4_small_conf <- confusionMatrix(factor(nn_1_4_small_result), factor(mysmalldata_test$Result), mode="everything")
print(nn_1_4_small_conf)
mysmalldata_train <- replace_zero(mysmalldata_train_b)
mysmalldata_test <- replace_zero(mysmalldata_test_b)
myrawdata_train <- replace_zero(myrawdata_train_b)
myrawdata_test <- replace_zero(myrawdata_test_b)
nn_1_4_small<-neuralnet(Result~having_IP_address+URL_Length+Shortining_Service+having_At_Symbol+
double_slash_redirecting+Prefix_Suffix+having_Sub_Domain+SSLfinal_State+
Domain_registration_length+Favicon+Port+HTTPS_token+Request_URL+
URL_of_Anchor+Links_in_tags+SFH+Submitting_to_email+Abnormal_URL+
Redirect+on_mouseover+RightClick+popUpWindow+Iframe+age_of_domain+
DNSRecord+web_traffic+Page_Rank+Google_Index+Links_pointing_to_page+
Statistical_report, mysmalldata_train,hidden=c(4))
plot(nn_1_4_small)
nn_1_4_small_model<-predict(nn_1_4_small,newdata = mysmalldata_test)
nn_1_4_small_result <- get_prediction(nn_1_4_small_model)
nn_1_4_small_conf <- confusionMatrix(factor(nn_1_4_small_result), factor(mysmalldata_test$Result), mode="everything")
print(nn_1_4_small_conf)
plot(nn_1_4_small)
